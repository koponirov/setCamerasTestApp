{"version":3,"sources":["assets/up-arrow.svg","assets/camera.svg","components/DrawerForm.jsx","redux/reducers/mapReducer.js","redux/reducers/drawerReducer.js","components/RotatedMarker.jsx","components/Map.jsx","components/Drawer.jsx","App.js","serviceWorker.js","redux/store.js","index.js"],"names":["module","exports","Component","initialState","markers","currentMarker","editMode","mapReducer","state","action","type","id","length","position","marker","lat","lng","angle","range","direction","map","filter","visible","toggleVisible","drawerReducer","proto_setPos","L","Marker","prototype","_setPos","LeafletMarker","extend","pos","call","this","_setRotation","options","rotation","_icon","style","DomUtil","TRANSFORM","rotationOrigin","transform","RotatedMarker","props","ExtendableMarker","connect","withLeaflet","setMarker","setCurrentMarker","width","height","Icon","iconUrl","arrow","iconSize","Map","center","zoom","minZoom","maxZoom","maxBounds","crs","CRS","Simple","onDblclick","e","latlng","doubleClickZoom","dragging","ImageOverlay","url","bounds","m","Circle","radius","key","onClick","console","log","Polygon","positions","FormItem","Form","Item","AInput","Input","input","meta","children","hasFeedback","label","rest","hasError","touched","invalid","validateStatus","help","error","DrawerFormRedux","reduxForm","form","enableReinitialize","handleSubmit","reset","removeMarker","onSubmit","gutter","span","Field","name","component","placeholder","value","htmlType","marginRight","drawer","setMarkerData","onClose","bodyStyle","paddingBottom","maskStyle","display","formData","parseInt","initialValues","App","className","Drawer","Boolean","window","location","hostname","match","reducers","combineReducers","reduxFormReducer","composeEnhancers","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","store","createStore","applyMiddleware","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.b9c3bd39.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/up-arrow.4c7789e9.svg\";","module.exports = __webpack_public_path__ + \"static/media/camera.f16a1286.svg\";","import React from \"react\";\r\nimport {Form, Input, Button, Col, Row} from \"antd\";\r\nimport {Field, reduxForm} from \"redux-form\";\r\nimport {Form as FormRedux} from 'redux-form'\r\n\r\nconst FormItem = Form.Item;\r\n\r\nconst makeField = Component => ({input, meta, children, hasFeedback, label, ...rest}) => {\r\n\r\n    const hasError = meta.touched && meta.invalid;\r\n\r\n    return (\r\n        <FormItem\r\n\r\n            label={label}\r\n            validateStatus={hasError ? \"error\" : \"success\"}\r\n            hasFeedback={hasFeedback && hasError}\r\n            help={hasError && meta.error}\r\n        >\r\n            <Component {...input} {...rest} children={children}/>\r\n        </FormItem>\r\n    );\r\n};\r\n\r\nconst AInput = makeField(Input);\r\n\r\nconst DrawerForm = props => {\r\n\r\n    const {handleSubmit, reset, removeMarker, toggleVisible, id} = props;\r\n\r\n    const deleteMarker = () => {\r\n        reset();\r\n        removeMarker(id)\r\n        toggleVisible()\r\n    }\r\n\r\n    return (\r\n        <FormRedux onSubmit={handleSubmit}>\r\n\r\n                <Row gutter={16}>\r\n                    <Col span={12}>\r\n                        <Field label=\"Координаты\"\r\n                               name=\"position\"\r\n                               component={AInput}\r\n                               placeholder=\"широта, долгота\"\r\n                               />\r\n                    </Col>\r\n                </Row>\r\n\r\n                <Row gutter={24}>\r\n                    <Col span={8}>\r\n                        <Field label=\"Направление\" name=\"direction\" component={AInput} placeholder=\"Направление\"/>\r\n                    </Col>\r\n                    <Col span={8}>\r\n                        <Field label=\"Угол обзора\" name=\"angle\" component={AInput} placeholder=\"Угол\"/>\r\n                    </Col>\r\n                    <Col span={8}>\r\n                        <Field label=\"Дальность обзора\" name=\"range\" value={'number'} component={AInput} placeholder=\"Дальность\"/>\r\n                    </Col>\r\n                </Row>\r\n\r\n\r\n                <FormItem>\r\n                    <Button type=\"primary\"\r\n                            htmlType=\"submit\"\r\n                            style={{marginRight: \"10px\"}}\r\n                    >\r\n                        Сохранить\r\n                    </Button>\r\n\r\n                    <Button onClick={deleteMarker}>\r\n                        Удалить\r\n                    </Button>\r\n                </FormItem>\r\n        </FormRedux>\r\n    );\r\n};\r\n\r\nexport const DrawerFormRedux = reduxForm({\r\n    form: \"drawerForm\", // a unique identifier for this form\r\n    enableReinitialize: true\r\n})(DrawerForm);\r\n","const ADD_MARKER = 'ADD_MARKER';\r\nconst REMOVE_MARKER = 'REMOVE_MARKER';\r\nconst SET_MARKER_DATA = 'SET_MARKER_DATA';\r\nconst SET_CURRENT_MARKER = 'SET_CURRENT_MARKER';\r\n\r\nlet initialState = {\r\n    markers: [],\r\n    currentMarker: null,\r\n    editMode: false,\r\n};\r\n\r\nconst mapReducer = (state = initialState, action) => {\r\n\r\n    switch (action.type) {\r\n        case ADD_MARKER:\r\n            return {\r\n                ...state,\r\n                markers: [\r\n                    ...state.markers,\r\n                    {\r\n                        id: state.markers.length + 1,\r\n                        position: [action.marker.lat, action.marker.lng],\r\n                        angle: 0,\r\n                        range: 25,\r\n                        direction: 'north'\r\n                    }\r\n                ]\r\n            };\r\n        case SET_MARKER_DATA:\r\n            return {\r\n                ...state,\r\n                markers: state.markers.map(marker => {\r\n                    if (marker.id === action.id) {\r\n                        return {...marker, range: action.range}\r\n                    }\r\n                    return marker;\r\n                })\r\n            };\r\n        case REMOVE_MARKER:\r\n            return {\r\n                ...state,\r\n                markers: state.markers.filter(marker => marker.id != action.id)\r\n            };\r\n        case SET_CURRENT_MARKER:\r\n            return {\r\n                ...state,\r\n                currentMarker: {...action.marker}\r\n            };\r\n\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n\r\nexport const setMarker = (marker) => ({type: ADD_MARKER, marker});\r\nexport const setMarkerData = (id, range) => ({type: SET_MARKER_DATA, id, range});\r\nexport const setCurrentMarker = (marker) => ({type: SET_CURRENT_MARKER, marker});\r\nexport const removeMarker = (id) => ({type: REMOVE_MARKER, id});\r\n\r\n\r\nexport default mapReducer;","const TOGGLE_VISIBLE = 'TOGGLE_VISIBLE';\r\n\r\nlet initialState = {\r\n    visible: false\r\n};\r\n\r\nconst drawerReducer = (state = initialState, action) => {\r\n\r\n    switch (action.type) {\r\n        case TOGGLE_VISIBLE:\r\n            return {\r\n                ...state,\r\n                visible: !state.visible\r\n            };\r\n\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n\r\nexport const toggleVisible = () => ({type:TOGGLE_VISIBLE})\r\n\r\nexport default drawerReducer;","import L from 'leaflet'\r\nimport { ExtendableMarker } from 'react-leaflet-extendable/dist/react-leaflet-extendable'\r\nimport { withLeaflet } from 'react-leaflet'\r\n\r\nconst proto_setPos = L.Marker.prototype._setPos\r\n\r\nconst LeafletMarker = L.Marker.extend({\r\n    _setPos(pos) {\r\n        proto_setPos.call(this, pos)\r\n        this._setRotation(this.options.rotation)\r\n    },\r\n    _setRotation(rotation) {\r\n        if (rotation) {\r\n            this._icon.style[L.DomUtil.TRANSFORM + 'Origin'] = this.options.rotationOrigin || 'center'\r\n            const transform = this._icon.style[L.DomUtil.TRANSFORM] + ` rotate(${rotation}deg)`\r\n            this._icon.style[L.DomUtil.TRANSFORM] = transform\r\n        }\r\n    },\r\n})\r\n\r\nconst createRotatedMarker = (pos, options) => {\r\n    return new LeafletMarker(pos, options)\r\n}\r\n\r\nclass RotatedMarker extends ExtendableMarker {\r\n    createLeafletElement() {\r\n        return createRotatedMarker(this.props.position, { ...this.props })\r\n    }\r\n}\r\n\r\nexport default withLeaflet(RotatedMarker)","import React from 'react';\r\nimport { ImageOverlay, Map, Polygon, Circle } from \"react-leaflet\";\r\nimport { CRS, Icon } from 'leaflet';\r\nimport { connect } from \"react-redux\";\r\nimport {setCurrentMarker, setMarker} from \"../redux/reducers/mapReducer\";\r\nimport camera from '../assets/camera.svg';\r\nimport arrow from '../assets/up-arrow.svg';\r\nimport '../App.css'\r\nimport { toggleVisible } from \"../redux/reducers/drawerReducer\";\r\nimport RotatedMarker from \"./RotatedMarker\";\r\n\r\n\r\nconst MapComponent = ({ markers, setMarker, width, height, toggleVisible, setCurrentMarker }) => {\r\n\r\n    const addMarker = (e) => {\r\n        let lat = e.latlng.lat;\r\n        let lng = e.latlng.lng;\r\n        setMarker({lat, lng});\r\n    };\r\n\r\n    const imgWidth = 650;\r\n    const imgHeight = 400;\r\n\r\n    const cameraIcon = new Icon({\r\n        iconUrl: arrow,\r\n        iconSize: [16, 16]\r\n    });\r\n\r\n    return (\r\n        <Map\r\n            center={[0, 0]}\r\n            zoom={1}\r\n            minZoom={-1}\r\n            maxZoom={2}\r\n            maxBounds={[[0, 0], [-height, width]]}\r\n            crs={CRS.Simple}\r\n            onDblclick={addMarker}\r\n            doubleClickZoom={false}\r\n            dragging={true}\r\n        >\r\n            <ImageOverlay\r\n                url={'https://static.tildacdn.com/tild3965-6139-4564-b262-303737393665/_8.jpg'}\r\n                bounds={[[-10, 100], [-imgHeight, imgWidth]]}\r\n            >\r\n\r\n                {markers.map(m => {\r\n\r\n                    const lat = m.position[0];\r\n                    const lng = m.position[1];\r\n\r\n                    return (\r\n                    <Circle\r\n                        center={[lat, lng]}\r\n                        radius={2}\r\n                        key={m.id}\r\n                        onClick={(e) => {\r\n                            if (e.latlng.lat == lat && e.latlng.lng == lng) {\r\n                                toggleVisible()\r\n                                setCurrentMarker(m)\r\n                            } else {\r\n                                console.log('no')\r\n                            }\r\n\r\n                        }}\r\n                    >\r\n                        <Polygon\r\n                            positions={[[lat, lng], [lat + m.range, lng - 3], [lat + m.range, lng + 3]]}/>\r\n                    </Circle>\r\n                )})}\r\n\r\n            </ImageOverlay>\r\n        </Map>\r\n    );\r\n};\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        markers: state.map.markers\r\n    }\r\n};\r\n\r\nexport default connect(mapStateToProps, {setMarker, setCurrentMarker, toggleVisible})(MapComponent);\r\n\r\n","import React from \"react\";\r\nimport { Drawer } from 'antd';\r\nimport 'antd/dist/antd.css'\r\nimport { connect } from \"react-redux\";\r\nimport { toggleVisible } from \"../redux/reducers/drawerReducer\";\r\nimport { DrawerFormRedux } from \"./DrawerForm\";\r\nimport {removeMarker, setMarkerData} from \"../redux/reducers/mapReducer\";\r\n\r\n\r\nconst DrawerComponent = ({ visible, toggleVisible, setMarkerData, removeMarker, currentMarker }) => {\r\n\r\n    const onClose = () => {\r\n        toggleVisible()\r\n    };\r\n\r\n    const onSubmit = (formData) => {\r\n\r\n        let id = currentMarker.id;\r\n        //перестало срабатывать задаваемое значение типа в форме value=\"number\"\r\n        let range = parseInt(formData.range,10)\r\n        setMarkerData(id, range);\r\n        toggleVisible()\r\n    };\r\n\r\n    return (\r\n\r\n        <Drawer\r\n            width={540}\r\n            onClose={onClose}\r\n            visible={visible}\r\n            bodyStyle={{paddingBottom: 80}}\r\n            maskStyle={{display: 'none'}}\r\n        >\r\n            <DrawerFormRedux onSubmit={onSubmit}\r\n                             initialValues={currentMarker}\r\n                             removeMarker={removeMarker}\r\n                             toggleVisible={toggleVisible}\r\n                             id={currentMarker ? currentMarker.id : 0}\r\n            />\r\n        </Drawer>\r\n\r\n    );\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        visible: state.drawer.visible,\r\n        markers: state.map.markers,\r\n        currentMarker: state.map.currentMarker\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps,\r\n    {toggleVisible, setMarkerData , removeMarker})(DrawerComponent)","import React from 'react';\nimport './App.css';\nimport MapComponent from \"./components/Map\";\nimport ContainerDimensions from \"react-container-dimensions\";\nimport DrawerComponent from \"./components/Drawer\";\n\nfunction App() {\n    return (\n        <div className='app_container'>\n            <ContainerDimensions>\n                {({width, height}) =>\n                    <MapComponent width={width} height={height}/>}\n            </ContainerDimensions>\n            <DrawerComponent/>\n        </div>\n    )\n}\n\nexport default App;\n\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import {applyMiddleware, combineReducers, compose, createStore} from \"redux\";\r\nimport mapReducer from \"./reducers/mapReducer\";\r\nimport drawerReducer from \"./reducers/drawerReducer\";\r\nimport { reducer as reduxFormReducer } from 'redux-form';\r\n\r\nlet reducers = combineReducers({\r\n    map: mapReducer,\r\n    drawer: drawerReducer,\r\n    form: reduxFormReducer\r\n});\r\n\r\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\r\nconst store = createStore(reducers, composeEnhancers(\r\n    applyMiddleware()\r\n));\r\n\r\nexport default store;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport {Provider} from \"react-redux\";\nimport store from \"./redux/store\";\n\nReactDOM.render(\n      <Provider store={store}>\n          <App />\n      </Provider>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}